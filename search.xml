<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[软件架构模式]]></title>
    <url>%2F2018%2F09%2F04%2Fsoftware-architecture%2F</url>
    <content type="text"><![CDATA[摘自https://towardsdatascience.com/software-architecture-patterns-98043af8028 下图为大多数的企业级的应用都会使用的最通用的架构模式，也被称为N层模式，假设有N个层数。这是Java EE应用的实际模式。 层的示例场景 表示层该层是web页面，UI形式和终端用户交互API的表示。 业务层可访问性，安全性和认证背后的逻辑都发生在这一层。这包含了ESB（Enterprise Service Buses，企业服务总线），中间件和其他请求拦截器来执行验证。 持久层这层是数据的表示层。这包括DAO（Data Access Object，数据访问对象）表示、ORM（Object Relational Mappings，对象关系映射）和其他在应用程序级别表示持久数据的模式。在更有意义的单词中，演示了RAM中的持久数据。它通常停留在下层的磁盘上。 数据库层扩展到SAN（Storage Area Networks，存储区域网络）的简单数据库。 层的组成层由组件组成。这些组件比对象类和包的抽象级别更高。组件可以展示执行单个任务的一组包。 “Components enforce the separation of concerns” “组件强制关注关注点的分离” 关键概念封闭层下图演示了隔离层的概念，该概念以更严格的方式将每个层分开，只允许顺序通过层而不允许旁路。如图所示，这加强了层间的更好耦合，使得整个系统对变化更为可行。 开放层开放层允许系统绕过层并击中下层。这是在任务关键系统中，延迟可能花费很多。通常，层意味着通信开销。因此，有时绕过层并直接从正确的层中寻找数据是合理的。 模式分析分层模式的采用可能误导并导致称为“架构陷阱反模式”的反模式，该反模式演示了具有不执行任何逻辑的层，但增加了通信开销。因此，这些层必须以执行补偿整个系统的通信开销和可维护性的特定任务的方式设计。 模式可测性这个由于分层性质会比较突出。每个层都可以通过传递哑消息和具有虚拟接口来演示即时层。 性能和可伸缩性这个由于通信开销会相对弱些。这可能需要转换消息类型等。在可伸缩性方面，添加更多的层不是一个选择，模式不会无限放大。]]></content>
      <categories>
        <category>软件架构</category>
      </categories>
      <tags>
        <tag>架构</tag>
      </tags>
  </entry>
</search>
